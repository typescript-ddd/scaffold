// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Aggregate Should render the aggregate root component 1`] = `
"import { AggregateRoot, EntityCreateProps, EntityUpdateProps  } from "@typescript-ddd/core";
import { UserCreatedEvent, UserUpdatedEvent, UserDeletedEvent } from "@src/domain/events";
import { Phone, UserId } from "@src/domain/models";

/**
 * Represents the properties required to create a user.
 * @extends {EntityCreateProps}
 */
export interface CreateUserProps extends EntityCreateProps {
    name: string;
    phone: Phone;
}
/**
 * Represents the properties required to update a user.
 * @extends {EntityUpdateProps}
 */
export interface UpdateUserProps extends EntityUpdateProps<UserId> {
    name: string;
    phone: Phone;
}
/**
 * Represents a user aggregate.
 * @extends AggregateRoot
 */
export class User extends AggregateRoot<UserId> {
    /**
     * Initializes a new instance of a user.
     * @param {UserId} id - An optional identifier of the user.
     * @param {string} name - The name of the user.
     * @param {Phone} phone - The phone of the user.
     */
    private constructor(private name: string, private phone: Phone, id?: UserId) {
        super(id ?? UserId.create());
        if (!id) {
          this.applyChange(new UserCreatedEvent(this.id, this));
        }
    }

    /**
     * Gets the name of the user.
     * @returns {string} - The name of the user.
     */
    getName(): string {
        return this.name;
    }

    /**
     * Gets the phone of the user.
     * @returns {Phone} - The phone of the user.
     */
    getPhone(): Phone {
        return this.phone;
    }

    /**
     * Update the user.
     * @param {UpdateUserProps} props - The properties to update.
     * @returns void
     */
    update(props: UpdateUserProps): void {
        // TODO: validate props
        this.name = props.name;
        this.phone = props.phone;
        this.applyChange(new UserUpdatedEvent(this.id, this));
    }

    delete(): void {
        this.applyChange(new UserDeletedEvent(this.id, this));
    }

    static create(props: CreateUserProps, id?: UserId): User {
        const user = new User(
          props.name,
          props.phone,
          id
        );
        return user;
    }
}    
"
`;

exports[`Aggregate Should render the trackable aggregate root component 1`] = `
"import { TrackableAggregateRoot, EntityCreateProps, EntityUpdateProps, UtcDate } from "@typescript-ddd/core";
import { UserCreatedEvent, UserUpdatedEvent, UserDeletedEvent } from "@src/domain/events";
import { UserId } from "@src/domain/models";

/**
 * Represents the properties required to create a user.
 * @extends {EntityCreateProps}
 */
export interface CreateUserProps extends EntityCreateProps {
    name: string;
    createdAtUtc?: UtcDate;
    updatedAtUtc?: UtcDate;
}
/**
 * Represents the properties required to update a user.
 * @extends {EntityUpdateProps}
 */
export interface UpdateUserProps extends EntityUpdateProps<UserId> {
    name: string;
}
/**
 * Represents a user aggregate.
 * @extends TrackableAggregateRoot
 */
export class User extends TrackableAggregateRoot<UserId> {
    /**
     * Initializes a new instance of a user.
     * @param {UserId} id - An optional identifier of the user.
     * @param {string} name - The name of the user.
     * @param {UtcDate} createdAtUtc - An optional creation date.
     * @param {UtcDate} updatedAtUtc - An optional last update date.
     */
    private constructor(private name: string, createdAtUtc?: UtcDate, updatedAtUtc?: UtcDate, id?: UserId) {
        super(id ?? UserId.create(), createdAtUtc, updatedAtUtc);
        if (!id) {
          this.applyChange(new UserCreatedEvent(this.id, this));
        }
    }

    /**
     * Gets the name of the user.
     * @returns {string} - The name of the user.
     */
    getName(): string {
        return this.name;
    }

    /**
     * Update the user.
     * @param {UpdateUserProps} props - The properties to update.
     * @returns void
     */
    update(props: UpdateUserProps): void {
        // TODO: validate props
        this.name = props.name;
        this.updatedAtUtc = UtcDate.now();
        this.applyChange(new UserUpdatedEvent(this.id, this));
    }

    delete(): void {
        this.applyChange(new UserDeletedEvent(this.id, this));
    }

    static create(props: CreateUserProps, id?: UserId): User {
        const user = new User(
          props.name,
          id
        );
        return user;
    }
}    
"
`;
